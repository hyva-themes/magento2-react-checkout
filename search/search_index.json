{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hyv\u00e4 Themes - React Checkout","text":""},{"location":"#_1","title":"Home","text":""},{"location":"#hyva-themesmagento2-react-checkout","title":"hyva-themes/magento2-react-checkout","text":"<p>Hyv\u00e4 React Checkout is an open-sourced Magento 2 module which provides a fast performing checkout page powered by React (a modern javascript library).</p> <p>Compatible with Magento 2.3.4 and higher.</p>"},{"location":"#what-does-it-do","title":"What does it do?","text":"<p>It loads a React Checkout at <code>[store-url]/hyva/reactcheckout</code>. When enabled in <code>hyva_react_checkout/general/enable</code> it replaces the default checkout.</p> <p>It depends on these two variables in <code>localstorage</code>:</p> <ul> <li><code>signin_token</code> to the customer section</li> <li><code>cartId</code> to the cart section</li> </ul> <p>For Hyv\u00e4 Themes or default Magento frontend, <code>hyva-themes/magento2-graphql-tokens</code> is needed to add these tokens to the customerSections.</p>"},{"location":"#what-it-is-not","title":"What it is not","text":"<p>Hyv\u00e4 React Checkout is not a drop-in replacement for the default Luma checkout; it does not have feature parity. Rather, it provides you a base on which you can build your own custom checkout for your site. It is a powerful tool with which you can develop the checkout in the most efficient way.</p> <p>It basically avoids the frustration you have when you want to customize the Luma checkout by making the development process super fun.</p> <p>It gives you a fast performing checkout as the final bundle size of the javascript is less than 90kb.</p>"},{"location":"#what-are-the-benefits","title":"What are the benefits?","text":"<p>In the default Luma theme in Magento 2, the checkout page is completely rendered using javascript. Unfortunately, the uiComponents are difficult to comprehend and developers are struggling when it comes to customize the checkout page. Also, the Luma checkout is too slow since it requires more than 400 javascript and template files needs to be download on the page load.</p> <p>In Hyv\u00e4 React Checkout, the UI is constructed using React Components. This means, if you are familiar with the React, then the development is super fun and enjoyable. It is easy to bring any kind of customizations. It loads only a single javascript file in order to render the entire checkout page. So the checkout page loads fast and performs well.</p> <p>By default, the checkout works out of box. But, in most of the time you need to customize the checkout page to bring some custom functionalities or modifying existing checkout behaviour or change the look and feel. To make this tedious process simpler, you can launch the embedded ReactApp as a stand alone App and by providing a cartId, you can work on the checkout page exclusively. This development mode supports by Hot Module Reloading (HMR) which will enable us to see the changes we have been making on the code almost immediately reflect on the browser and that will eventually going to save a huge amount of time in the development.</p>"},{"location":"#where-can-we-use-it","title":"Where can we use it?","text":"<p>Hyv\u00e4 React Checkout can be used in any Luma based themes or with Hyv\u00e4 Theme directly. With some modifications, we can also use this with a headless approach too.</p> <p>In a Luma based theme</p> <p>You would encounter some CSS problems. This is because we are using Tailwind CSS for the styling of the checkout page and since this is a different CSS approach that is being used in the Luma theme, some CSS conflicts should be expected.</p> <p>In a headless approach</p> <p>There are some configurations we are passing through the data attribute via HTML DOM. This needs to be implemented in the headless approach to make it work there.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>In order to use Hyv\u00e4 React Checkout, you would require the following</p> <ul> <li>React knowledge. This is essential to work with Hyv\u00e4 React Checkout as it is completely build with React.</li> <li>A magento 2 site with graphql API.</li> <li>Nodejs &gt;= 10 is required in order to make it work.</li> </ul>"},{"location":"#technologies-terminologies-used","title":"Technologies/ Terminologies Used","text":"<p>The following technologies are used in the Hyv\u00e4 React Checkout.</p> <ul> <li>React : React is used to build the UI.</li> <li>Tailwind CSS : This is used for styling the react components.</li> <li>Formik : This is used to store the checkout form states.A popular library in React realm.</li> <li>Yup : This is used for the validation of the checkout form. It works well with Formik.</li> <li>GraphQL : It uses the Magento 2 GraphQL API in order to update the quote from the checkout page.</li> </ul>"},{"location":"at_a_glance/","title":"Hyva Checkout At A Glance","text":"<p>Hyva checkout is essentially a one page checkout solution.  So the whole checkout looks like below:</p> <p></p> <p>It contains following sections</p>"},{"location":"at_a_glance/#email-section","title":"Email Section","text":"<p>Email section has mainly two purpose. It allows us to continue in a guest checkout mode or we can continue checkout after logged-in</p> <p>In the guest checkout mode, which is the default mode, there is an email address field. Upon providing the email address and save, it will attach the email address to the cart.</p> <p></p> <p>In the logged-in checkout mode, the user will be provided with username and password fields. Upon submit, if the login is successful, the cart is now merged with the customer cart (if any) and then proceed as logged-in checkout. Customer addresses will be listed out in the address sections to pick up in this case. If the login unsuccessful, then it will be treated as guest checkout. the email address provided will be attached to the cart and then proceed as the first case.</p> <p></p> <p>You can read in depth about email section in the \"Checkout - Email Section\" page.</p>"},{"location":"at_a_glance/#billing-address-section","title":"Billing Address Section","text":"<p>Billing address section allows to set a billing address to the cart.</p> <p>By default billing address would be treated same as the shipping address.</p> <p></p> <p>However you can alter this by unchecking the checkbox. This will show the billing address fields and you can fill out the details there.</p> <p></p> <p>In the case of logged-in checkout, if the customer has billing address options, then it will be listed out as address cards. You can pick any one of the address or create a fresh address.</p> <p>You can read in depth about the billing address section in the \"Checkout - Billing Address\" page.</p>"},{"location":"at_a_glance/#shipping-address-section","title":"Shipping Address Section","text":"<p>Shipping address section allows to set a shipping address to the cart</p> <p>Shipping address section will show the shipping address fields by default. You can provide the shipping address and upon submit, it will save the shipping address and set the same shipping address as the billing address if the billing address set same as the shipping address.</p> <p></p> <p>In the case of logged-in checkout, if the customer has shipping address options, then it will be listed out as address cards. You can pick any one of the address or create a fresh address.</p> <p></p> <p>You can read in depth about the billing address section in the \"Checkout - Shipping Address\" page.</p>"},{"location":"at_a_glance/#shipping-methods-section","title":"Shipping Methods Section","text":"<p>Based on the cart info, it will be showing the availabe shipping methods as radio option. You can pick up any of the shipping method. upon update, it will set the opted shipping method to the cart</p> <p></p>"},{"location":"at_a_glance/#payment-methods-section","title":"Payment Methods Section","text":"<p>Baded on the cart info, it will be showing the available payment methods as radio option. You can choose the correct option there. Upon update, it willset the opted payment method to the cart.</p> <p></p>"},{"location":"at_a_glance/#cart-items-section","title":"Cart Items Section","text":"<p>Cart items section will show the product involving in the cart.</p> <p>You can update the quantity of cart items from the checkout page itsef. You can also remove a cart item from the checkout page itself.</p> <p></p>"},{"location":"at_a_glance/#totals-section","title":"Totals Section","text":"<p>Each of the above section will alter the cart data as the user fill out the form. According to the user actions, the totals would change and those changes will be shown in real time in the total section.</p> <p></p>"},{"location":"at_a_glance/#place-order","title":"Place Order","text":"<p>Place order button converts the cart to an order and then show the order success page.</p>"},{"location":"build/","title":"How can build the Hyv\u00e4 React Checkout","text":"<p>In the build process, you are making the react application ready for use as a Magento module.</p> <p>In a normal circumstance, you don't need to do this process. However, if you want to customize the react app in a way you needed, then you need to alter the react components by your own. In this case, knowing the build process is necessary in order to get your changes reflected in the site.</p>"},{"location":"build/#how-can-you-build-the-app","title":"How can you build the app","text":"<ul> <li> <p>Go to reactapp directory</p> <pre><code>cd src/reactapp/\n</code></pre> </li> <li> <p>Run build command</p> <pre><code>NODE_ENV=production npm run build\n</code></pre> </li> </ul> <p>Here it is assumed you already installed the dependencies by running <code>npm install</code> command.</p>"},{"location":"customize/","title":"How To Customize Hyv\u00e4 React Checkout","text":"<p>Hyv\u00e4 React Checkout is a Magento 2 module which holds a react app inside it. So when you want to customize the checkout, you need to work with the react app embedded inside the module.</p> <p>Also, when it comes to customization, the installation approach you have taken into account becomes important. Checkout the installation instructions for further details.</p>"},{"location":"customize/#development-mode","title":"Development Mode","text":"<p>The ReactApp embedded inside Hyv\u00e4 React Checkout allow us to launch it as a stand alone App. This is the best way of customizing Hyv\u00e4 React Checkout for your site. When you launch the ReactApp, it will be served from the address <code>http://localhost:3000</code>. It will prompt you to provide a valid cartId and once you provided the cartId, you can now work with the checkout in the most efficient way as this development mode supports Hot Module Reloading (HMR).</p> <p>To setting up the development environment, follow the further steps.</p>"},{"location":"customize/#where-is-the-react-app","title":"Where is the react app","text":"<p>You can find the react app at <code>src/reactapp</code>.</p>"},{"location":"customize/#setting-up-react-app","title":"Setting up react app","text":"<ol> <li> <p>cd into the react application</p> <pre><code>cd src/reactapp\n</code></pre> </li> <li> <p>install the packages</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Configure your Magento 2 backend site.</p> <p>There are basically two ways you can achieve this:</p> <p>3.a - The cleanest approach is here. create <code>.env</code> file in <code>src/reactapp</code> directory and specify your site as shown below</p> <pre><code>REACT_APP_BASE_URL=http://your-m2-site.com\n</code></pre> <p>CORS complaint from the browser</p> <p>One disadvantage you may face here is the complaint of CORS issue from browser.</p> <p>3.b - Another option would be specify your site as your <code>proxy</code> in the <code>package.json</code>. There is already an entry there. Replace it with yours</p> <pre><code>\"proxy\": \"http://your-m2-site.com\",\n</code></pre> <p>Use only one option above. Don't do both.</p> </li> <li> <p>There are some more configurations you can do using environment variables. You can find an example in <code>env.example</code> file. If you need any of the configurations specified there, then create <code>.env</code> file at the root path of the react app and add your custom configurations there. You can find more details of these environment variables here.</p> </li> </ol>"},{"location":"customize/#start-app","title":"Start App","text":"<p>In order to start the application</p> <pre><code>npm start\n</code></pre> <p>The app is now available at <code>http://localhost:3000</code></p> <p>As soon as the react app kick start, it will show a prompt box to input the cart id. Well, without the a valid cart, the checkout page is useless.</p> <p></p> <p>So provide a valid cart id and then you are good to go.</p>"},{"location":"env_variables/","title":"Environment Variables","text":"<p>The react app comes along with the Hyv\u00e4 React Checkout provides some environment variables to configure the app. This becomes handy if you want to see your app in a particular currency or in a language for example.</p> <p>All the env configurations can be see in your code in the file <code>env.example</code>. The variable names are straight forward. Every env variable stars with <code>REACT_APP_</code> which is a create-react-app trivia (Oh... did I mention the react app inside the Hyv\u00e4 React Checkout is basically a create-react-app? \ud83e\udd14 ).</p>"},{"location":"env_variables/#env-configurations-available","title":"Env Configurations Available","text":"<ol> <li> <p><code>REACT_APP_BASE_URL</code>: Defines the base URL for the Magento backend from which the react app needs to fetch the data. There is also a setting  called <code>proxy</code> available in <code>package.json</code> file which also serves the same purpose where it won't throw any CORS errors in the browser. Comes in handy in that situation.</p> </li> <li> <p><code>REACT_APP_STORE_CODE</code>: Specifies the store code from which data needs to be collected. This data is passed in the header in all graphql queries so that store specific data will be obtained in the checkout.</p> </li> <li> <p><code>REACT_APP_LANGUAGE</code>: Specifies the locale of the react app. Based on these values translation will be applied in the react app. eg: <code>en_US</code> for English store; <code>de_DE</code> for German store etc.</p> </li> <li> <p><code>REACT_APP_CURRENCY_CODE</code>: The currency code should be used in the react app. This will be used in the <code>Intl.NumberFormat</code> to correctly format the price according to the language. eg: <code>EUR</code> for Euro, <code>INR</code> for Indian Rupee, etc.</p> </li> <li> <p><code>REACT_APP_CURRENCY_SYMBOL</code>: The currency symbol should be used in the react app. This will be used in the <code>Intl.NumberFormat</code> to correctly format the price according to the language. eg: <code>$</code> for Dollar, <code>\u20ac</code> for Euro, etc.</p> </li> <li> <p><code>REACT_APP_DEFAULT_COUNTRY</code>: Default country the react app needs to be used. This will be used in the country field in the address sections. If none specified, then default to <code>US</code>.</p> </li> </ol> <p>You should place your <code>.env</code> file at the root of the react application.</p>"},{"location":"env_variables/#order-of-configurations-considered","title":"Order of configurations considered","text":"<p>The highest priority is always for the environment variable configurations. The next preference will be to go for the data attribute <code>data-checkout_Config</code> where you can specify all these settings if you want. When the production build finally works in the site, this is how we are passing store specific configurations into the react app. If you need this during development, then you need to specify this in the <code>public/index.html</code> file. At last, it will use the default values in the app. Most of them you can find in the <code>src/config.js</code> file.</p>"},{"location":"faqs/","title":"Frequently Asked Questions","text":"Is Hyv\u00e4 React Checkout stable? <p>Yes, it is sable. Currently, the stable version of the repo available in <code>1.0.x</code>. There is a major upgrade is in progress. You can find this beta version in the branch <code>2.0-develop</code>.</p> Is there a demo available? <p>A demo for the Hyv\u00e4 Checkout is available in Hyv\u00e4 Demo site. There is a demo from Elgento's team too</p> Which custom payment methods supported? <p>To see supported payment methods, see Payment Supports.</p>"},{"location":"how_to_use/","title":"How to use this module","text":"<p>Hyva-Checkout is essentially a Magento 2 module which provides a fast and extendible checkout experience in a magento site. Since it is a part of Hyva-Themes, it is natural to assume it would only work with hyva-themes. But, the truth is, it is not.</p> <p>You can use this module with any Magento 2 sites. Such as,</p> <ul> <li>Magento 2 sites using a theme that inhertis luma/blank theme</li> <li>Magento 2 sites using the hyva-theme</li> <li>Magento 2 sites that works in headless</li> </ul>"},{"location":"how_to_use/#changes-you-want-to-do-in-a-hyva-theme-based-site","title":"Changes you want to do in a hyva-theme based site","text":"<p>Both hyva-theme and hyva-checkout uses tailwindcss to style the pages. In a hyva-theme based site, it does not make sense to include <code>Hyva_Checkout::css/styles.css</code> stylesheet because of the following reasons.</p> <ol> <li>It adds an additional style sheet in the site. One more style sheet means one more reder blocking in the browser</li> <li>The style sheet holds lot of duplicated styles since both using the tailwindcss.</li> </ol> <p>Due to this, it is better to add hyva-checkout components in the tailwindcss purge directory list in your hyva-theme based site. You can find more details of this in the official documentation of hyva: Tailwind Purging settings</p> <p>Below is the bare minium things you need to do</p> <ol> <li>You need setup a child theme in your site. It should be inherited from <code>Hyva/default</code> theme. For the sake of simplicity, I am calling this child theme as <code>Hyva/custom</code>.</li> <li>Copy over the web directory from <code>vendor/hyva-themes/magento2-default-theme/web/</code> to your own theme <code>app/design/frontend/Hyva/custom/web/</code></li> <li>Edit the <code>tailwind.config.js</code> file inside your theme and add following lines inside purge directory list.</li> </ol> <pre><code>module.exports = {\n    ...\n    purge: {\n        content: [\n            ...\n            // Hyva checkout components\n            '../../../../../../../vendor/hyva-themes/magento2-hyva-checkout/src/reactapp/src/components/*.jsx',\n            '../../../../../../../vendor/hyva-themes/magento2-hyva-checkout/src/reactapp/src/components/**/*.jsx'\n            ...\n        ]\n    }\n}\n...\n</code></pre> <p>With these changes, Hyva-checkout styles will be also considered by your theme and thus you will see a stylish hyva checkout page by default.</p>"},{"location":"i18n/","title":"Internationalization","text":"<p>Hyv\u00e4 React Checkout uses Magento 2 translation feature under the hood. The translations are prepared using the block <code>Hyva\\ReactCheckout\\Block\\CheckoutTranslator</code> and passed over to the ReactApp via a javascript global variable <code>CHECKOUT_TRANSLATIONS</code>. These would be picked up by the ReactApp and utilize it.</p>"},{"location":"i18n/#translation-the-backend-story","title":"Translation - The backend story","text":"<p>Hyv\u00e4 React Checkout uses layout XML update to include the checkout related translatable strings.</p> <p>File:  <code>src/view/frontend/layout/hyva_reactcheckout_index.xml</code></p> <pre><code>&lt;block class=\"Hyva\\ReactCheckout\\Block\\CheckoutTranslator\"\n       name=\"checkout.translations\"\n       template=\"Hyva_ReactCheckout::translation.phtml\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"checkout_translations\" xsi:type=\"array\"&gt;\n            &lt;item name=\"hyva_react_checkout_core\" xsi:type=\"string\"&gt;\n                &lt;![CDATA[-- Please Select --,%1 zipcode: %1,%1 is required,...]]&gt;\n            &lt;/item&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/block&gt;\n</code></pre> <p>As you can see here <code>Hyva\\ReactCheckout\\Block\\CheckoutTranslator</code> is responsible for doing the translation process. We are passing <code>checkout_translations</code> as an argument here and it will be an array. Finally, we are passing the core translatable strings through the group <code>hyva_checkout_core</code> here.</p> <p>File: <code>src/view/frontend/templates/translation.phtml</code></p> <pre><code>&lt;script&gt;\n    var CHECKOUT_TRANSLATIONS = '&lt;?= $block-&gt;getTranslations()  ?&gt;';\n&lt;/script&gt;\n</code></pre> <p>Here we are passing the translation using a global javascript variable <code>CHECKOUT_TRANSLATIONS</code> to the frontend.</p> <p>So when you need to add more translatable strings through this, all you need to do is pass it through the layout update XML file.</p> <p>File: <code>&lt;your/layout/update/xml&gt;/hyva_reactcheckout_index.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceContainer name=\"content\"&gt;\n            &lt;referenceBlock name=\"checkout.translations\"&gt;\n                &lt;arguments&gt;\n                    &lt;argument name=\"checkout_translations\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"&lt;unique_group_name_here&gt;\" xsi:type=\"string\"&gt;\n                            &lt;![CDATA[your translations,goes here]]&gt;\n                        &lt;/item&gt;\n                    &lt;/argument&gt;\n                &lt;/arguments&gt;\n            &lt;/referenceBlock&gt;\n        &lt;/referenceContainer&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n</code></pre> <p>Make sure to use a unique group name for your translations. After this by clearing the <code>layout</code> and <code>full_page</code> cache, your translations would be added and will be available in the ReactApp to be used.</p> <p>What if my translatable string contains a comma?</p> <p>In this case, you need to include it like below</p> <p><code>\"first part of string, second part of string\"</code></p>"},{"location":"i18n/#translation-frontend-story","title":"Translation - Frontend story","text":"<p>There is a helper function <code>__()</code> available in the ReactApp similar to the translation facility in Magento 2 templates. You can find this helper function at <code>src/reactapp/src/i18n/__.js</code>. For an example, go to the <code>PlaceOrder</code> component.</p> <p>File: <code>src/reactapp/src/components/PlaceOrder.jsx</code></p> <pre><code>import React from 'react';\nimport { __ } from '../i18n';\n\nfunction PlaceOrder() {\n\n  return (\n    &lt;div className=\"flex items-center justify-center h-24\"&gt;\n      &lt;Button\n        variant=\"warning\"\n        big\n        disable={!isValid}\n        click={() =&gt; submitHandler(values)}\n      &gt;\n        {__('Place Order')}\n      &lt;/Button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default PlaceOrder;\n</code></pre> <p>see the import of the function <code>__()</code> and usage. It is that simple.</p> <p>Another job <code>__()</code> function does is, it accepts any number of parameters which will be replaced in the string at the right position. For example, if you want to print the string: <code>My name is Julius Caesar</code>. You can do this:</p> <pre><code>const firstName = 'Julius';\nconst lastName = 'Caesar';\n\n__('My name is %1 %1', firstName, lastName);\n</code></pre> <p>In the string <code>%1</code> part indicates it is the dynamic part and needs to be replaced with the other parameters passing to the <code>__()</code>. These parameters will be replaced in the <code>%1</code> part in the given order.</p>"},{"location":"installation/","title":"Setting up Hyv\u00e4 React Checkout","text":"<p>This checkout is not intended to be installed as plug-and-play. It should be considered as a toolbox to build your own checkout based on your needs. A developer with ReactJS knowledge will be required.</p> <p>Ideally, you would use this checkout with your own version of this module. There are number of ways you can setup your own version of this module which is described in detail in the section Customization Steps</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>If you want to install the checkout as a demo or just try it out, install it directly as follows:</p> <ol> <li> <p>Install via composer</p> <p>a. Via Packagist:</p> <pre><code>composer require hyva-themes/magento2-react-checkout\n</code></pre> <p>b. Via composer</p> <pre><code>composer config repositories.hyva-themes/magento2-react-checkout git git@github.com:hyva-themes/magento2-react-checkout.git\n\ncomposer require hyva-themes/magento2-react-checkout\n</code></pre> </li> <li> <p>Enable module     <code>bin/magento setup:upgrade</code></p> </li> <li>Apply theme specific changes (if any). You can find more details of this further down.</li> </ol>"},{"location":"installation/#additional-required-steps-hyva-themes","title":"Additional Required Steps - Hyv\u00e4 Themes","text":"<p>Both Hyv\u00e4 Themes and Hyv\u00e4 React Checkout use TailwindCSS for styling. In a Hyv\u00e4 Themes based site, it does not make sense to include <code>Hyva_Checkout::css/styles.css</code> stylesheet because of the following reasons.</p> <ol> <li>It adds an additional style sheet in the site. One more style sheet means one more render-blocking resource in the browser.</li> <li>The style sheet holds lot of duplicated styles since both using the TailwindCSS.</li> </ol> <p>Due to these reasons, it is better to add Hyv\u00e4 React Checkout styled components in the TailwindCSS purge directory list of your Hyv\u00e4 Themes based site. You can find more details of this in the official documentation of Hyv\u00e4 Themes: Tailwind Purging settings</p> <p>Below is the bare minimum steps you need to do in order to achieve it.</p> <ol> <li>You need to setup a child theme in your site. It should be inherited from <code>Hyva/default</code> theme. For the sake of simplicity, I am calling this child theme as <code>Hyva/custom</code>.</li> </ol> <p>Here's how to quickly set it up from the command line;</p> <pre><code>mkdir -p app/design/frontend/Hyva/custom\ncp -R vendor/hyva-themes/magento2-default-theme/web app/design/frontend/Hyva/custom/web\ncp vendor/hyva-themes/magento2-default-theme/registration.php app/design/frontend/Hyva/custom\ncp vendor/hyva-themes/magento2-default-theme/theme.xml app/design/frontend/Hyva/custom\nsed -i 's/Hyva\\/reset/Hyva\\/default/' app/design/frontend/Hyva/custom/theme.xml\nsed -i 's/Default/Custom/' app/design/frontend/Hyva/custom/theme.xml\nsed -i 's/Hyva\\/default/Hyva\\/custom/' app/design/frontend/Hyva/custom/registration.php\nbin/magento setup:upgrade\n</code></pre> <ol> <li>Copy over the web directory from <code>vendor/hyva-themes/magento2-default-theme/web/</code> to your own theme <code>app/design/frontend/Hyva/custom/web/</code> (already done if you followed previous instructions).</li> <li>Edit the <code>tailwind.config.js</code> file inside your theme and add/uncomment following lines inside purge directory list.</li> </ol> <pre><code>module.exports = {\n    ...\n    purge: {\n        content: [\n            ...\n            // Hyva checkout components\n            '../../../../../../../vendor/hyva-themes/magento2-react-checkout/src/reactapp/src/**/*.jsx',\n            '../../../../../../../vendor/hyva-themes/magento2-react-checkout/src/view/frontend/templates/react-container.phtml',\n            ...\n        ]\n    }\n}\n...\n</code></pre> <ol> <li>Install dependencies and build the new CSS.</li> </ol> <pre><code>npm --prefix app/design/frontend/Hyva/custom/web/tailwind/ install\nnpm --prefix app/design/frontend/Hyva/custom/web/tailwind/ run build-prod\n</code></pre> <p>For Hyva_CheckoutExample template users</p> <p>If you are using the Hyva_CheckoutExample template for customizing Hyv\u00e4 React Checkout, then you are required to include the React components in that module too in the above purge list.</p> <p>With these changes in place, Hyv\u00e4 React Checkout styles will be also considered by your theme and thus you will see a stylized checkout page in your store.</p>"},{"location":"installation/#additional-steps-luma-theme","title":"Additional Steps - Luma Theme","text":"<p>For Luma theme based site, Hyv\u00e4 React Checkout module works out of box. This is because the stylesheet responsible for the Hyv\u00e4 React Checkout styles <code>Hyva_ReactCheckout::css/styles.css</code> is already included through a layout update.</p> <p>In a Luma based theme</p> <p>You would encounter some CSS problems. This is because we are using Tailwind CSS for the styling of the checkout page and since this is a different CSS approach that is being used in the Luma theme, some CSS conflicts should be expected.</p>"},{"location":"installation/#additional-steps-headless-solutions","title":"Additional Steps - Headless Solutions","text":"<p>You are required to include the stylesheet <code>Hyva_ReactCheckout::css/styles.css</code> and the js file <code>Hyva_ReactCheckout::js/react-checkout.js</code> in your checkout page. These two static resources are already included through layout update. But, if your headless solution does not respect the layout update, then it is your job to include them in your checkout page.</p> <p>You need to pass the checkout related configurations (from Magento 2 backend) to the ReactApp. This is currently managed through data attributes in the below HTML DOM element.</p> <p>File:  <code>src/view/frontend/templates/react-container.phtml</code></p> <pre><code>&lt;div\n    id=\"react-checkout\"\n    data-base_url=\"&lt;?= $block-&gt;getBaseUrl() ?&gt;\"\n    data-static_file_path=\"&lt;?= $block-&gt;getViewFileUrl('Hyva_ReactCheckout/js') ?&gt;\"\n    data-checkout_config=\"&lt;?= $escaper-&gt;escapeHtmlAttr($configProvider-&gt;getConfig()) ?&gt;\"\n&gt;\n</code></pre> <p>Same thing you should do in your headless approach.</p> <p>Ideally, these information must be managed through a custom graphql query. This way, it would be compatible with any type of frontend solution. It will be resolved in a future version of Hyv\u00e4 React Checkout.</p>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Once the module is available in your site, you can see the checkout page at the url <code>[store-url]/hyva/reactcheckout</code>.</p> <p>If you want to make Hyv\u00e4 React Checkout as your default checkout solution, then enable the below configuration in the Magento2 Backend:</p> <p><code>HYVA THEMES-&gt;Checkout-&gt;General Settings-&gt;Enable</code></p> <p>The configuration path is <code>hyva_react_checkout/general/enable</code>.</p> <p>After this, you would be able to see your checkout when you navigate to <code>[store-url]/checkout</code>.</p>"},{"location":"installation/#customization-steps","title":"Customization Steps","text":"<p>In almost all cases, you need to customize the checkout. When it comes to customizing Hyv\u00e4 React Checkout, you can basically have three approaches. You should opt one of the approaches given below which best suits your needs.</p> <ul> <li> <p>The recommended way of customizing Hvy\u00e4 Checkout would be using the Magento2 Checkout Example Template. In this approach, you are keeping the Hyv\u00e4 React Checkout as a composer dependency and never touches it. The customization is done via another module which you setup at <code>app/code/</code> directory using the template given above. In a nutshell, this template includes a custom webpack configuration which enables you to copy over the React Components you really need to alter. This way, the customization will be kept differently and thus eventually it would be easy for you to upgrade Hyv\u00e4 React Checkout and adopt the changes into your customization if needed.</p> </li> <li> <p>The second approach would be to fork the original Hyv\u00e4 React Checkout repository and use the forked version in your site. This way, you can keep and versioning the customization you are making in that forked repository.</p> </li> <li> <p>The third approach would be setting up Hyv\u00e4 React Checkout inside <code>app/code</code> directory. To do this, you need to create the directory <code>app/code/Hyva/ReactCheckout</code> and then copy the content of <code>src/</code> directory of Hyv\u00e4 React Checkout module over there. This will also allow you to track the customizations.</p> </li> </ul>"},{"location":"payment-integration/","title":"Payment Integration","text":"<p>In Hyv\u00e4 React Checkout, the payment options will be shown as radio inputs by default. You can choose the option and place the order, and everything works out of the box.</p> <p>But showing just a radio input box and allowing you to select/deselect them is not what you needed for all payment options. Some payment methods need different behavior. Also, some payment methods need a separate flow when we perform the \"place order\" action. To help you out in such cases, Hyv\u00e4 React Checkout already possesses some superpowers, which we will see in a short time.</p>"},{"location":"payment-integration/#payment-supports","title":"Payment Supports","text":"<p>There are numerous payment service providers (PSP) out there. In a site, we opt one of the PSP by adding its Magento 2 extension and configure it. These PSPs will support many modes of payment methods. Due to this, it will be a cumbersome process to support all the PSPs out there.</p> <p>Due to the above reason, we are not keeping payment components as part of Hyv\u00e4 React Checkout. But we will be maintaining separate payment repositories that would support most common PSPs which will hold the custom payment method components which you can use with Hyv\u00e4 React Checkout seamlessly.</p> <p>Below, we are listing the payment repositories, and each repository will have specific instructions about its usage.</p> <ul> <li>Amazon - hyva-themes/magento2-react-checkout-amazon-pay</li> <li>easyCredit-Ratenkauf netzkollektiv/magento2-react-checkout-easycredit</li> <li>Ivy - getivy/magento-2-hyva-react-checkout</li> <li>Klarna - hyva-themes/magento2-react-checkout-klarna</li> <li>Mollie official mollie/magento2-hyva-react-checkout</li> <li>Mollie - MdnAgency/magento2-hyva-checkout-mollie</li> <li>MultiSafepay - MultiSafepay/magento2-hyva-checkout-multisafepay</li> <li>Offline payment methods - hyva-themes/magento2-react-checkout-offline-payments</li> <li>Payone - hyva-themes/magento2-hyva-checkout-payone</li> <li>Paypal Express - hyva-themes/magento2-hyva-checkout-paypal-express</li> <li>Sage Pay Suite - ebizmarts/magento2-hyva-checkout-sage-pay-suite</li> <li>Stripe - eltrino/magento2-hyva-checkout-stripe</li> </ul> <p>This is a community effort. So we welcome all of you to help out to grow the above list. The payone repository is an ideal place to look into if you need to create a payment method integration repository.</p>"},{"location":"payment-integration/#payment-configurations-and-its-usage","title":"Payment Configurations and Its Usage","text":"<p>Depending upon the payment methods, you may have some special configuration settings in your store. Usually, you do this under <code>Stores &gt; Configuration</code>. If you are familiar with the default Magento 2 checkout page, then you may know that Magento 2 passes this configuration via a global variable which you can find at <code>window.checkoutConfig</code>.</p> <p>To collect these checkout configurations, we have a ViewModel (<code>Hyva\\ReactCheckout\\ViewModel\\CheckoutConfigProvider</code>) available in the module and we are passing this configuration through the root DOM element.</p> <p>See the layout file where we injecting the view model.</p> <p>File: <code>src/view/frontend/layout/hyva_reactcheckout_index.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    ...\n    &lt;body&gt;\n        &lt;referenceContainer name=\"content\"&gt;\n            &lt;block\n                cacheable=\"false\"\n                name=\"checkout.container\"\n                template=\"Hyva_ReactCheckout::react-container.phtml\"\n            &gt;\n                &lt;arguments&gt;\n                    &lt;argument\n                        name=\"checkout_config_provider\"\n                        xsi:type=\"object\"&gt;Hyva\\ReactCheckout\\ViewModel\\CheckoutConfigProvider&lt;/argument&gt;\n                &lt;/arguments&gt;\n            &lt;/block&gt;\n        &lt;/referenceContainer&gt;\n        ...\n    &lt;/body&gt;\n&lt;/page&gt;\n</code></pre> <p>See the data attribute <code>data-checkout_configuration</code> through which we are passing this configuration.</p> <pre><code>File: `src/view/frontend/templates/react-container.phtml`\n\n\n    &lt;?php\n    ...\n    /** @var \\Magento\\Framework\\Escaper $escaper */\n    /** @var \\Hyva\\ReactCheckout\\ViewModel\\CheckoutConfigProvider $configProvider */\n    $configProvider = $block-&gt;getCheckoutConfigProvider();\n    ...\n    ?&gt;\n    &lt;div\n        id=\"react-checkout\"\n        ...\n        data-checkout_config=\"&lt;?= $escaper-&gt;escapeHtmlAttr($configProvider-&gt;getConfig())  ?&gt;\"\n    &gt;\n    ...\n    &lt;/div&gt;\n</code></pre> <p>Now the react app has access to the payment configurations, and it can be used in the application according to your need.</p>"},{"location":"payment-integration/#custom-payment-renderer","title":"Custom Payment Renderer","text":"<p>As already stated, by default, all payment methods appear as a radio input. But Hyv\u00e4 React Checkout allows using a custom renderer for any payment methods.</p> <p>You can either develop your own custom payment renderer within the <code>reactapp</code>or use an existing custom payment renderer repo within Hyv\u00e4 React Checkout.</p>"},{"location":"payment-integration/#how-to-create-my-own-custom-payment-renderer","title":"How To Create My Own Custom Payment Renderer","text":"<p>Lets say we want to create a custom payment renderer for paypal-express solution. This is how you do this in Hyv\u00e4 React Checkout.</p> <p>Create following folders/ files in <code>src/reactapp/src/paymentMethods</code></p> <pre><code>src/reactapp/src/paymentMethods/\n|\n|____paypalExpress/\n    |\n    |____renderers.js\n    |\n    |____src/components/PaypalExpress.jsx\n</code></pre> <p>You need at least two files in order to properly create a custom payment renderer.</p> <ol> <li>The custom payment render component. This is a react component. This react component will be used to render the payment method. In the shown example <code>src/components/PaypalExpress.jsx</code> is what out custom payment renderer component.</li> <li> <p><code>renderers.js</code> file that configures the payment renderer component. The content of this file somewhat looks like below</p> <p>File: <code>src/reactapp/src/paymentMethods/paypalExpress/renderers.js</code></p> <pre><code>import PaypalExpress from './src/components/PaypalExpress';\n\nexport default {\n  paypal_express: PaypalExpress,\n};\n</code></pre> <p>So it exports an object. Each key specifies the payment method code (<code>paypal_express</code>) and its value is the custom payment render component (<code>PaypalExpress</code>).</p> </li> </ol>"},{"location":"payment-integration/#how-to-use-a-custom-payment-renderer-repo-with-hyva-react-checkout","title":"How To Use A Custom Payment Renderer Repo With Hyv\u00e4 React Checkout","text":"<p>You need to specify your custom payment repo in the <code>package.json</code> file as shown below:</p> <p>File: <code>src/reactapp/package.json</code></p> <pre><code>\"config\": {\n    \"paymentMethodsRepo\": {\n        \"payone\": \"git@github.com:hyva-themes/magento2-hyva-checkout-payone.git\"\n    }\n},\n</code></pre> <p>As you can see above, we are configuring <code>payone</code> custom payment solution under <code>config.paymentMethodsRepo</code>. With this change in your <code>package.json</code> and if you run <code>npm install</code>, then your repo will be cloned into <code>src/reactapp/src/paymentMethods</code> directory and properly configured over there.</p>"},{"location":"payment-integration/#how-custom-payment-renderer-works","title":"How Custom Payment Renderer Works","text":"<p>It all starts from the react component <code>&lt;PaymentMethodMemorized /&gt;</code>. This component is responsible for showing the entire payment method section. See its implementation</p> <p>File: <code>src/reactapp/src/components/paymentMethod/PaymentMethodMemorized.jsx</code></p> <pre><code>import React, { useEffect, useState } from 'react';\n...\nimport customRenderers from '../../paymentMethods/customRenderers';\n\nconst PaymentMethodMemorized = React.memo(({ formikData }) =&gt; {\n  ...\n  return (\n    &lt;PaymentMethodFormManager formikData={formikData}&gt;\n      &lt;Card classes={isPaymentAvailable ? '' : 'opacity-75'}&gt;\n        &lt;ToggleBox show title={__('Payment Methods')}&gt;\n          {isPaymentAvailable ? (\n            &lt;PaymentMethodList methodRenderers={customRenderers} /&gt;\n          ) : (\n            &lt;NoPaymentMethodInfoBox /&gt;\n          )}\n        &lt;/ToggleBox&gt;\n      &lt;/Card&gt;\n    &lt;/PaymentMethodFormManager&gt;\n  );\n}\n\nexport default PaymentMethodMemorized;\n</code></pre> <p>Here <code>customRenderers</code> holds all the custom payment renderers available. This value is an object where its keys will be payment method code and values will be renderer component. <code>renderers</code> state is then passing to <code>&lt;PaymentMethodList /&gt;</code> component. This component will loop through each payment method and if a custom payment renderer defined for a payment, then it will use that custom payment renderer for that payment method; else, it will render the payment method as radio button (default behaviour).</p> <p><code>customRenderers</code> object which is coming from the file <code>src/paymentMethods/customRenderers.js</code> is an auto-generated file. This file is updated when you have custom payment renderer repositories setup in your <code>package.json</code> file and you perform the installation <code>npm install</code>. The chance to alter this file happens only in those situations where you have your own custom payment renderers and you want to make them available in the payment method section. In that case, you need to manually add your custom payment renderer in that file.</p>"},{"location":"payment-integration/#how-custom-payment-renderer-interacts-on-place-order-action","title":"How Custom Payment Renderer Interacts on Place Order Action","text":"<p>If your payment method needs to alter the behaviour of place order action, then Hyv\u00e4 React Checkout provides some features out of the box to help you out.</p> <p>File: <code>src/reactapp/src/context/Form/CheckoutFormProvider.jsx</code></p> <pre><code>...\nfunction CheckoutFormProvider({ children }) {\n  ...\n  const [paymentActionList, setPaymentActions] = useState({});\n  ...\n  const registerPaymentAction = useCallback(\n    (paymentMethodCode, paymentMethodAction) =&gt; {\n      setPaymentActions(actions =&gt; ({\n        ...actions,\n        [paymentMethodCode]: paymentMethodAction,\n      }));\n    },\n    [setPaymentActions]\n  );\n  ...\n}\n...\n</code></pre> <p>Here <code>CheckoutFormProvider</code> is one of the super parent components that wraps react app. As you can see in the code it has a state <code>paymentActionList</code> which can be populated with any custom payment action you want to perform when the \"place order\" action happens. See the <code>registerPaymentAction</code> function. This function is available for all the child components and thus a custom payment method component can use it to register a custom \"place order\" behaviour.</p> <p>Suppose you have a custom payment method component <code>PayOneCreditCard</code> and it looks like below</p> <pre><code>function PayOneCreditCard({ method, selected, actions }) {\n  const { registerPaymentAction } = useCheckoutFormContext();\n\n  // custom \"place order\" submit action\n  const paymentSubmitHandler = useCallback(\n    async values =&gt; {\n      console.log({ values });\n      alert('yeeeha');\n    },\n    []\n  );\n\n  // registering custom \"place order\" action for the payment method\n  useEffect(() =&gt; {\n    registerPaymentAction('payone_creditcard', paymentSubmitHandler);\n  }, [registerPaymentAction, paymentSubmitHandler]);\n\n  return (\n    // custom payment method JSX here\n  );\n}\n</code></pre> <p>So in the <code>useEffect</code>, we are registering custom place order action for the payment method. Now when the user opted <code>payone_creditcard</code> as the payment option and then click on the \"Place Order\" button, it will use the <code>paymentSubmitHandler</code> in this component to process the order. So now the payment method needs to convert the quote to order according to its need and then redirect the user to the success page.</p>"},{"location":"payment-integration/#custom-payment-method-best-practices","title":"Custom Payment Method Best Practices","text":"<ol> <li> <p>Define dedicated custom hooks for accessing global states such as <code>App</code>, <code>Cart</code> or <code>Form</code> within the payment method itself. There are hooks available in other places to get the global state. But, it is always better stay away from those custom hooks and define and use dedicated custom hooks within the payment method.</p> <p>So if you want to get an <code>App</code> action such as <code>setPageLoader</code> within your payment method, then your can do the following to retrieve it.</p> <p>File: <code>src/reactapp/src/paymentMethods/&lt;yourPaymentMethod&gt;/src/hooks/usePayOneAppContext.js</code></p> <pre><code>import { useContext } from 'react';\n\nimport AppContext from '../../../../context/App/AppContext';\n\nexport default function usePayOneAppContext() {\n  const [, { setPageLoader }] = useContext(AppContext);\n\n  return {\n    setPageLoader,\n  };\n}\n</code></pre> <p>Now use <code>usePayOneAppContext</code> hook inside your <code>yourPaymentMethod</code>.</p> </li> <li> <p>Define your custom API methods within the payment method itself.</p> <p>Hyv\u00e4 React Checkout holds all of its api methods inside <code>src/reactapp/src/api/</code> directory. The components does not use any api methods defined here directly. Instead we are passing them through <code>AppContext</code> or <code>CartContext</code>. So if an API method needed in your payment method is already defined in the app, then access them through the corresponding context and use it with your payment method.</p> <p>But in some cases, your payment method needs to use its own custom api methods. In this case, it should be defined inside <code>src/reactapp/src/paymentMethods/&lt;yourPaymentMethod&gt;/src/api/</code> directory. When you define your custom API methods, it will be good to follow the conventions we already using in <code>src/reactapp/src/api/</code>.</p> <p>You can use your custom API methods directly inside the components. No need to setup a context and passing the api method through that context. But if your payment method is so complicated and you need a context layer to manage it effectively, then feel free to adopt that approach too.</p> </li> <li> <p>Most of the custom payment methods need to provide custom data as part of placing the order. In the Luma checkout, they send this extra information either via <code>additional_data</code> and/or via <code>extension_attributes</code> which are part of REST API method <code>save-payment</code>. In order to replicate the same in Hyv\u00e4 React Checkout, it is vital to rely on the above REST API method. So there is a general hook <code>src/reactapp/src/hook/usePerformPlaceOrderByREST.js</code> available and it can be handy in payment integration in order to place an order.</p> </li> </ol>"},{"location":"2.0/installation/","title":"The setup and usage instructions","text":""},{"location":"2.0/installation/#instruction-to-launch-the-react-app","title":"Instruction to launch the React App","text":"<p>Below provides the minimal steps to launch the react app embedded in Hyv\u00e4 Checkout 2.0.</p> <ol> <li> <p>Clone the repository</p> <pre><code>git clone git@github.com:hyva-themes/magento2-react-checkout.git hyva-checkout\n</code></pre> </li> <li> <p>Switch to 2.0 branch</p> <pre><code>git checkout 2.0-develop\n</code></pre> </li> <li> <p>CD into the react app</p> <pre><code>cd hyva-checkout/src/reactapp\n</code></pre> </li> <li> <p>Install dependencies</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Specify the Magento backend URL via <code>.env</code>. Please see <code>env.example</code> for more details. You need to at least provide the <code>HYVA_BASE_URL</code> data to make it work.</p> <pre><code>HYVA_BASE_URL=http://your-magento-backend.com\n</code></pre> </li> <li> <p>Launch the application</p> <pre><code>npm run dev\n</code></pre> </li> <li> <p>Go to your browser and open the url <code>http://localhost:3000</code>. You will see your checkout.</p> </li> </ol>"},{"location":"2.0/installation/#instructions-to-build-the-app","title":"Instructions to build the app","text":"<ol> <li> <p>CD into the react app directory</p> <pre><code>cd hyva-checkout/src/reactapp\n</code></pre> </li> <li> <p>Perform build (provided you already installed the dependencies)</p> </li> </ol> <p>When you build, there are two files generated and stored into <code>src/view/frontend/web/</code> directory.</p> <ul> <li><code>react-checkout.es.min.js</code> - the build of the react app</li> <li><code>style.css</code> - the CSS file needs to be used.</li> </ul> <p>When you use this module as a magento extension, these two files will be used in your checkout. So you don't need to do anything further here.</p>"},{"location":"2.0/installation/#instructions-to-use-custom-payment-integrators","title":"Instructions to use custom payment integrators","text":"<p>Hyv\u00e4 Checkout has a concept of custom payment renderers. It allows you to introduce an external repository that deals with custom payment integration which works with Hyv\u00e4 Checkout. In the <code>2.0.x</code> version also the same concept does exist.</p> <p>To add custom payment renderer, you need to follow the instructions provided in the repository. In a nutshell, you are adding them via <code>package.json</code></p> <pre><code>\"config\": {\n    \"paymentMethodsRepo\": {\n        \"payone\": \"git@github.com:hyva-themes/magento2-hyva-checkout-payone.git\"\n    }\n},\n</code></pre> <p>You should deal with conflicts</p> <p>The custom payment renderers supports <code>1.0.x</code> version of Hyv\u00e4 Checkout. This can introduce some issues in the app as the referred components or hooks inside the payment renderers may not be available due to the directory structure changes in the <code>2.0.x</code> version of the Hyv\u00e4 Checkout. So it is your responsibility to fix those issues in the payment renderers repo. If there are <code>2.0.x</code> versions exists in the custom payment renderer repositories, then try to use it as these problems probably fixed in those branches.</p>"},{"location":"2.0/major-changes/","title":"Major changes.","text":""},{"location":"2.0/major-changes/#new-features","title":"New features","text":"<ul> <li>The react app is now powered by Vite.</li> <li>TailwindCSS is used in JIT mode.</li> <li>Multiple themes supported.</li> </ul>"},{"location":"2.0/major-changes/#code-level-changes","title":"Code level changes","text":"<p>In Hyv\u00e4 Checkout 2.0, the directory structure is changed a bit. Given below the directory structure.</p> <pre><code>reactapp\n|\n|____vite.config.js\n|\n|____tailwind.config.js\n|\n|____index.html\n|\n|____tailwindcss\n|\n|____src\n     |\n     |____api\n     |\n     |____paymentMethods\n     |\n     |____app\n          |\n          |____code\n          |\n          |____themes/base\n</code></pre> <ul> <li><code>vite.config.js</code> - Vite related configurations reside here. Here is where we define dev, production related configuration, build configurations, proxy configurations etc.</li> <li><code>tailwind.config.js</code> - TailwindCSS configuration of the app. The css file used in JIT mode resides in the <code>tailwindcss</code> directory along with other custom components.</li> <li><code>index.html</code> - This is used in the dev mode to show the application</li> <li><code>src/api</code> - API methods which communicates to Magento backend from the react app.</li> <li><code>src/paymentMethods</code> - Custom payment renderers will be stored here (if any)</li> <li><code>src/app/code</code> - The components which are common and can be used across different themes. These components can be contexts, FormikProvider components, custom hooks, utility methods, general react components etc.</li> <li><code>src/app/design</code> - Themes reside here. By default, it comes with <code>base</code> theme.</li> </ul>"},{"location":"2.0/multi-theme/","title":"Multi Themes","text":"<p>Hyv\u00e4 Checkout 2.0 come up with multi theme support. This allow developers multiple starting points from which they can choose the suitable theme and start to customize it. That is going to save a ton of times at the starting point itself.</p>"},{"location":"2.0/multi-theme/#theme-starting-points-available","title":"Theme starting points available.","text":"<p>Hyv\u00e4 Checkout 2.0 contains the base theme already. It is same as the theme we are currently using in the <code>1.0</code> version. Other themes currently available are:</p> <ul> <li>Lumazon theme</li> </ul>"},{"location":"2.0/multi-theme/#how-to-configure-a-theme","title":"How to configure a theme","text":"<p>The instructions to use an external theme will be explained in detail in the theme repository. In a nutshell, you are doing this through <code>package.json</code> file. Update the <code>package.json</code> as shown below</p> <pre><code>\"config\": {\n    \"themeRepositories\": {\n        \"lumazon\": \"git@github.com:rajeev-k-tomy/hyva-checkout-steps-theme.git\"\n    }\n},\n</code></pre> <p>After this, run <code>npm install</code>. This will add the theme into the codebase.</p> <p>Finally the root component of the theme needs to be specified in the <code>src/reactapp/src/app/code/checkoutForm/CheckoutForm.jsx</code> file.</p> <pre><code>import LumazonTheme from '../../themes/lumazon/Index';\n...\n...\nreturn (\n    &lt;CheckoutFormWrapper initialData={initialData}&gt;\n      &lt;BasLumazonThemeeTheme /&gt;\n    &lt;/CheckoutFormWrapper&gt;\n);\n</code></pre> <p>Please note some of the concept here can be changed in a later stage. For now, there are some manual work such as above.</p>"},{"location":"2.0/new_version/","title":"New Experimental Version of Hyv\u00e4 Checkout","text":"<p>A new experimental version of Hyv\u00e4 Checkout, 2.0-develop, is now available and it is worth to check it out. The key features of this new phase are:</p> <ul> <li>React app is now powered by modern React frontend tool - Vite.</li> <li>TailwindCSS in JIT mode.</li> <li>It support multiple themes.</li> </ul>"},{"location":"2.0/new_version/#the-inevitable-shift-to-vite","title":"The inevitable shift to Vite","text":"<p>The React app embedded in the stable version (1.0) is powered by create-react-app. It performs well if you compare it with Luma checkout customization. But, if you are from a React world, you will eventually find the app lags a little in its performance. It has currently a noticeable launching time when you start the app in development mode and it re-renders slowly too. Create-react-app is great and really stable and is powered by webpack. But, it is time to move to a most modern frontend tool and we choose <code>Vite</code> for it.</p> <p>Vite is really really fast. There is no lag. The app launches fast and the HMR is almost instantaneous!!! You are going to love it once it is used.</p>"},{"location":"2.0/new_version/#tailwindcss-is-jit-mode","title":"TailwindCSS is JIT mode","text":"<p>The <code>1.0.x</code> version of the Hyv\u00e4 Checkout uses development version of TailwindCSS file in the application. This will limit you some time when you add some utility classes and in order to make it work, you need to adjust TailwindCSS settings and relaunch the app again.</p> <p>In this new version, the TailwindCSS is used in JIT mode. So when you add a new style which is not being used before, you don't need to relaunch it again in order to see the style applied in the frontend. It gives you all the cool features TailwindCSS provides in the JIT mode. So checkout the documentation of TailwindCSS JIT mode to understand the features and all.</p>"},{"location":"2.0/new_version/#multiple-theme-support","title":"Multiple Theme Support","text":"<p>The new version also supports multiple themes. The current UI of Hyv\u00e4 Checkout is really nice and works well. However, it makes lot of sense to have multiple theme starting points for Hyv\u00e4 Checkout so that you can choose whichever theme more suits your needs and customize it from there. We really hope this will save a lot of efforts at the starting itself. How cool is that \ud83d\ude0e</p>"}]}